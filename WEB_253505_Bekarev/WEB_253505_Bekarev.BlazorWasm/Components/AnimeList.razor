﻿
@inject IDataService dataService
@implements IDisposable

<div class="container-fluid">
	<table class="table">
		<thead class="thead-dark">
			<tr>
				<!--<th scope="col">#</th>-->
				<th scope="col">Name</th>
				<th scope="col">Description</th>
				<th scope="col">SeriesAmount</th>
				<th scope="col">TotalTime</th>
			</tr>
		</thead>
		<tbody>
			@if (dataService.Animes is not null && dataService.Animes.Any())
			{
				@foreach (var item in dataService.Animes)
				{
					<tr>
						<!--<th scope="row">@item.Id</th>-->
						<td>@item.Name</td>
						<td>@item.Description</td>
						<td>@item.SeriesAmount</td>
						<td>@item.TotalTime</td>
						<button class="btn btn-outline-secondary" @onclick="() => OnItemSelected.Invoke(item.Id)">Details</button>
					</tr>
				}
			}
			else
			{
				<span>No items</span>
			}
		</tbody> 
	</table>
</div>

@code {
	[Parameter]
	public Action<int> OnItemSelected { get; set; }

	protected override void OnInitialized()
	{
		dataService.DataLoaded += StateHasChanged;
	}

	public void Dispose()
	{
		dataService.DataLoaded -= StateHasChanged;
	}
}
